<div>Structures and Pointers:</div><div><br></div><div>Pointers can be accessed along with structures. A pointer variable of structure can be created as below:</div><div>struct name {</div><div>&nbsp; &nbsp; member1;</div><div>&nbsp; &nbsp; member2;</div><div>&nbsp; &nbsp; .</div><div>&nbsp; &nbsp; .</div><div>};</div><div>-------- Inside function -------</div><div>struct name *ptr;</div><div><br></div><div>Here, the pointer variable of type struct name is created.</div><div><br></div><div>Structure's member through pointer can be used in two ways:</div><div><br></div><div>&nbsp; &nbsp; Referencing pointer to another address to access memory</div><div>&nbsp; &nbsp; Using dynamic memory allocation</div><div><br></div><div>Consider an example to access structure's member through pointer</div><div>-----------------------------------------------------------------</div><div>#include &lt;stdio.h&gt;</div><div>struct name{</div><div>&nbsp; &nbsp;int a;</div><div>&nbsp; &nbsp;float b;</div><div>};</div><div>int main(){</div><div>&nbsp; &nbsp; struct name *ptr,p;</div><div>&nbsp; &nbsp; ptr=&amp;p; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* Referencing pointer to memory address of p */</div><div>&nbsp; &nbsp; printf("Enter integer: ");</div><div>&nbsp; &nbsp; scanf("%d",&amp;(*ptr).a);</div><div>&nbsp; &nbsp; printf("Enter number: ");</div><div>&nbsp; &nbsp; scanf("%f",&amp;(*ptr).b);</div><div>&nbsp; &nbsp; printf("Displaying: ");</div><div>&nbsp; &nbsp; printf("%d%f",(*ptr).a,(*ptr).b);</div><div>&nbsp; &nbsp; return 0;</div><div>}</div><div><br></div><div>In this example, the pointer variable of type struct name is referenced to the address of p. Then, only the structure member through pointer can can accessed.</div><div><br></div><div>Structure pointer member can also be accessed using -&gt; operator.</div><div><br></div><div>(*ptr).a is same as ptr-&gt;a</div><div>(*ptr).b is same as ptr-&gt;b</div><div><br></div><div>Accessing structure member through pointer using dynamic memory allocation</div><div><br></div><div>To access structure member using pointers, memory can be allocated dynamically using malloc() function defined under "stdlib.h" header file.</div><div>Syntax to use malloc()</div><div><br></div><div>ptr=(cast-type*)malloc(byte-size)</div><div><br></div><div>Example to use structure's member through pointer using malloc() function</div><div>--------------------------------------------------------------------------</div><div><br></div><div>#include &lt;stdio.h&gt;</div><div>#include&lt;stdlib.h&gt;</div><div>struct name {</div><div>&nbsp; &nbsp;int a;</div><div>&nbsp; &nbsp;float b;</div><div>&nbsp; &nbsp;char c[30];</div><div>};</div><div>int main(){</div><div>&nbsp; &nbsp;struct name *ptr;</div><div>&nbsp; &nbsp;int i,n;</div><div>&nbsp; &nbsp;printf("Enter n: ");</div><div>&nbsp; &nbsp;scanf("%d",&amp;n);</div><div>&nbsp; &nbsp;ptr=(struct name*)malloc(n*sizeof(struct name));</div><div>/* Above statement allocates the memory for n structures with pointer ptr pointing to base address */</div><div>&nbsp; &nbsp;for(i=0;i&lt;n;++i){</div><div>&nbsp; &nbsp; &nbsp; &nbsp;printf("Enter string, integer and floating number &nbsp;respectively:\n");</div><div>&nbsp; &nbsp; &nbsp; &nbsp;scanf("%s%d%f",&amp;(ptr+i)-&gt;c,&amp;(ptr+i)-&gt;a,&amp;(ptr+i)-&gt;b);</div><div>&nbsp; &nbsp;}</div><div>&nbsp; &nbsp;printf("Displaying Infromation:\n");</div><div>&nbsp; &nbsp;for(i=0;i&lt;n;++i)</div><div>&nbsp; &nbsp; &nbsp; &nbsp;printf("%s\t%d\t%.2f\n",(ptr+i)-&gt;c,(ptr+i)-&gt;a,(ptr+i)-&gt;b);</div><div>&nbsp; &nbsp;return 0;</div><div>}</div><div><br></div><div>Output</div><div>------</div><div>Enter n: 2</div><div>Enter string, integer and floating number &nbsp;respectively:</div><div>Programming</div><div>2</div><div>3.2</div><div>Enter string, integer and floating number &nbsp;respectively:</div><div>Structure</div><div>6</div><div>2.3</div><div>Displaying Information</div><div>Programming &nbsp; &nbsp; &nbsp;2 &nbsp; &nbsp; &nbsp;3.20</div><div>Structure &nbsp; &nbsp; &nbsp;6 &nbsp; &nbsp; &nbsp;2.30</div>