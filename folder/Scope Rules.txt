<div>Scope Rules:</div><div><br></div><div>A scope in any programming is a region of the program where a defined&nbsp;</div><div><br></div><div>variable can have its existence and beyond that variable can not be&nbsp;</div><div><br></div><div>accessed. There are three places where variables can be declared in C&nbsp;</div><div><br></div><div>programming language:</div><div>&nbsp; &nbsp; Inside a function or a block which is called local variables,</div><div>&nbsp; &nbsp; Outside of all functions which is called global variables.</div><div>&nbsp; &nbsp; In the definition of function parameters which is called formal&nbsp;</div><div><br></div><div>parameters.</div><div>Let us explain what are local and global variables and formal&nbsp;</div><div><br></div><div>parameters.</div><div><br></div><div>1) Local Variables</div><div>------------------</div><div><br></div><div>Variables that are declared inside a function or block are called local&nbsp;</div><div><br></div><div>variables. They can be used only by statements that are inside that&nbsp;</div><div><br></div><div>function or block of code. Local variables are not known to functions&nbsp;</div><div><br></div><div>outside their own. Following is the example using local variables. Here&nbsp;</div><div><br></div><div>all the variables a, b and c are local to main() function.</div><div><br></div><div>2) Global Variables</div><div>-------------------</div><div><br></div><div>Global variables are defined outside of a function, usually on top of the&nbsp;</div><div><br></div><div>program. The global variables will hold their value throughout the&nbsp;</div><div><br></div><div>lifetime of your program and they can be accessed inside any of the&nbsp;</div><div><br></div><div>functions defined for the program.</div><div><br></div><div>A global variable can be accessed by any function. That is, a global&nbsp;</div><div><br></div><div>variable is available for use throughout your entire program after its&nbsp;</div><div><br></div><div>declaration.</div><div><br></div><div>3) Formal Parameters</div><div>--------------------</div><div><br></div><div>A function parameters, formal parameters, are treated as local variables&nbsp;</div><div><br></div><div>with-in that function and they will take preference over the global&nbsp;</div><div><br></div><div>variables.&nbsp;</div><div><br></div><div>Initializing Local and Global Variables</div><div>---------------------------------------</div><div><br></div><div>When a local variable is defined, it is not initialized by the system, you&nbsp;</div><div><br></div><div>must initialize it yourself. Global variables are initialized automatically&nbsp;</div><div><br></div><div>by the system when you define them as follows:</div><div>Data Type<span class="Apple-tab-span" style="white-space:pre"><span style="white-space: normal;">	</span></span>Initial Default Value</div><div>int <span class="Apple-tab-span" style="white-space:pre"><span style="white-space: normal;">		</span></span> &nbsp;0</div><div>char <span class="Apple-tab-span" style="white-space:pre"><span style="white-space: normal;">		</span></span>'\0'</div><div>float <span class="Apple-tab-span" style="white-space:pre"><span style="white-space: normal;">		</span></span> &nbsp;0</div><div>double <span class="Apple-tab-span" style="white-space:pre"><span style="white-space: normal;">		</span></span> &nbsp;0</div><div>pointer <span class="Apple-tab-span" style="white-space:pre"><span style="white-space: normal;">	</span></span> NULL</div><div><br></div><div>It is a good programming practice to initialize variables properly&nbsp;</div><div><br></div><div>otherwise, your program may produce unexpected results because&nbsp;</div><div><br></div><div>uninitialized variables will take some garbage value already available at&nbsp;</div><div><br></div><div>its memory location.</div>