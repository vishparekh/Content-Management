<div>Programming Strings:</div><div><br></div><div>In C programming, array of character are called strings. A string is terminated by null character /0. For example:</div><div>"c string tutorial"</div><div>Declaration of strings</div><div>----------------------</div><div><br></div><div>Strings are declared in C in similar manner as arrays. Only difference is that, strings are of char type.</div><div>char s[5];</div><div><br></div><div>Strings can also be declared using pointer.</div><div>char *p;</div><div><br></div><div>Initialization of strings</div><div>-------------------------</div><div><br></div><div>In C, string can be initialized in different number of ways.</div><div><br></div><div>char c[]="abcd";</div><div>&nbsp; &nbsp; &nbsp;OR,</div><div>char c[5]="abcd";</div><div>&nbsp; &nbsp; &nbsp;OR,</div><div>char c[]={'a','b','c','d','\0'};</div><div>&nbsp; &nbsp; &nbsp;OR;</div><div>char c[5]={'a','b','c','d','\0'};</div><div><br></div><div>String can also be initialized using pointers</div><div>char *c="abcd";</div><div><br></div><div>Reading a line of text</div><div>----------------------</div><div><br></div><div>C program to read line of text manually.</div><div><br></div><div>#include &lt;stdio.h&gt;</div><div>int main(){</div><div>&nbsp; &nbsp; char name[30],ch;</div><div>&nbsp; &nbsp; int i=0;</div><div>&nbsp; &nbsp; printf("Enter name: ");</div><div>&nbsp; &nbsp; while(ch!='\n') &nbsp; &nbsp;// terminates if user hit enter</div><div>&nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ch=getchar();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; name[i]=ch;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; i++;</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp; name[i]='\0'; &nbsp; &nbsp; &nbsp; // inserting null character at end</div><div>&nbsp; &nbsp; printf("Name: %s",name);</div><div>&nbsp; &nbsp; return 0;</div><div>}</div><div><br></div><div>This process to take string is tedious. There are predefined functions gets() and puts in C language to read and display string respectively.</div><div><br></div><div>int main(){</div><div>&nbsp; &nbsp; char name[30];</div><div>&nbsp; &nbsp; printf("Enter name: ");</div><div>&nbsp; &nbsp; gets(name); &nbsp; &nbsp; //Function to read string from user.</div><div>&nbsp; &nbsp; printf("Name: ");</div><div>&nbsp; &nbsp; puts(name); &nbsp; &nbsp;//Function to display string.</div><div>&nbsp; &nbsp; return 0;</div><div>}</div><div><br></div><div>Both, the above program has same output below:</div><div><br></div><div>Output</div><div>------</div><div>Enter name: Tom Hanks</div><div>Name: Tom Hanks</div><div><br></div><div>Passing Strings to Functions</div><div>----------------------------</div><div>String can be passed to function in similar manner as arrays as, string is also an array.</div><div><br></div><div>#include &lt;stdio.h&gt;</div><div>void Display(char ch[]);</div><div>int main(){</div><div>&nbsp; &nbsp; char c[50];</div><div>&nbsp; &nbsp; printf("Enter string: ");</div><div>&nbsp; &nbsp; gets(c); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; Display(c); &nbsp; &nbsp; // Passing string c to function. &nbsp; &nbsp;</div><div>&nbsp; &nbsp; return 0;</div><div>}</div><div>void Display(char ch[]){</div><div>&nbsp; &nbsp; printf("String Output: ");</div><div>&nbsp; &nbsp; puts(ch);</div><div>}</div><div><br></div><div>Here, string c is passed from main() function to user-defined function Display(). In function declaration, ch[] is the formal argument.</div>