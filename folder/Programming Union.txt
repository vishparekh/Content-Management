<div>Programming Unions:</div><div><br></div><div>Unions are quite similar to the structures in C. Union is also a derived type as structure. Union can be defined in same manner as structures just the keyword used in defining union in union where keyword used in defining structure was struct.</div><div>union car{</div><div>&nbsp; char name[50];</div><div>&nbsp; int price;</div><div>};</div><div>Union variables can be created in similar manner as structure variable.</div><div>union car{</div><div>&nbsp; char name[50];</div><div>&nbsp; int price;</div><div>}c1, c2, *c3;</div><div><br></div><div>OR;</div><div><br></div><div>union car{</div><div>&nbsp; char name[50];</div><div>&nbsp; int price;</div><div>};</div><div>-------Inside Function-----------</div><div>union car c1, c2, *c3;</div><div><br></div><div>In both cases, union variables c1, c2 and union pointer variable c3 of type union car is created.</div><div><br></div><div>Accessing members of an union</div><div>-----------------------------</div><div><br></div><div>The member of unions can be accessed in similar manner as that structure. Suppose, we you want to access price for union variable c1 in above example, it can be accessed as c1.price. If you want to access price for union pointer variable c3, it can be accessed as (*c3).price or as c3-&gt;price.</div><div><br></div><div>Difference between union and structure</div><div>--------------------------------------</div><div><br></div><div>Though unions are similar to structure in so many ways, the difference between them is crucial to understand. This can be demonstrated by this example:</div><div><br></div><div>#include &lt;stdio.h&gt;</div><div>union job { &nbsp; &nbsp; &nbsp; &nbsp; //defining a union</div><div>&nbsp; &nbsp;char name[32];</div><div>&nbsp; &nbsp;float salary;</div><div>&nbsp; &nbsp;int worker_no;</div><div>}u;</div><div>struct job1 {</div><div>&nbsp; &nbsp;char name[32];</div><div>&nbsp; &nbsp;float salary;</div><div>&nbsp; &nbsp;int worker_no;</div><div>}s;</div><div>int main(){</div><div>&nbsp; &nbsp;printf("size of union = %d",sizeof(u));</div><div>&nbsp; &nbsp;printf("\nsize of structure = %d", sizeof(s));</div><div>&nbsp; &nbsp;return 0;</div><div>}</div><div><br></div><div>Output</div><div><br></div><div>size of union = 32</div><div>size of structure = 40</div><div><br></div>