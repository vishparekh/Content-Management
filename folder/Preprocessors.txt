<div>Preprocessors:</div><div><br></div><div>Preprocessor extends the power of C programming language. Line that begin with # are called preprocessing directives.</div><div>Use of #include</div><div>---------------</div><div>Let us consider very common preprocessing directive as below:</div><div><br></div><div>#include &lt;stdio.h&gt;</div><div><br></div><div>Here, "stdio.h" is a header file and the preprocessor replace the above line with the contents of header file.</div><div><br></div><div>Use of #define</div><div>--------------</div><div>Preprocessing directive #define has two forms. The first form is:</div><div><br></div><div>#define identifier token_string</div><div><br></div><div>token_string part is optional but, are used almost every time in program.</div><div><br></div><div>Example of #define</div><div>------------------</div><div>#define c 299792458 /*speed of light in m/s */</div><div><br></div><div>The token string in above line 2299792458 is replaced in every occurrence of symbolic constant c.</div><div><br></div><div>C Program to find area of a circle. [Area of circle=πr2]</div><div><br></div><div>#include &lt;stdio.h&gt;</div><div>#define PI 3.1415</div><div>int main(){</div><div>&nbsp; &nbsp; int radius;</div><div>&nbsp; &nbsp; float area;</div><div>&nbsp; &nbsp; printf("Enter the radius: ");</div><div>&nbsp; &nbsp; scanf("%d",&amp;radius);</div><div>&nbsp; &nbsp; area=PI*radius*radius;</div><div>&nbsp; &nbsp; printf("Area=%.2f",area);</div><div>&nbsp; &nbsp; return 0;</div><div>}</div><div><br></div><div>Output</div><div>------</div><div>Enter the radius: 3&nbsp;</div><div>Area=28.27</div><div><br></div><div>Syntactic Sugar</div><div>---------------</div><div>Syntactic sugar is the alteration of programming syntax according to the will of programmer. For example:</div><div><br></div><div>#define LT &lt;</div><div><br></div><div>Every time the program encounters LT, it will be replaced by &lt;.</div><div><br></div><div>Second form of preprocessing directive with #define is:</div><div><br></div><div>Macros with argument</div><div>--------------------</div><div>Preprocessing directive #define can be used to write macro definitions with parameters as well in the form below:</div><div><br></div><div>#define identifier(identifier 1,.....identifier n) token_string</div><div><br></div><div>Again, the token string is optional but, are used in almost every case. Let us consider an example of macro definition with argument.</div><div><br></div><div>#define area(r) (3.1415*r*r)</div><div><br></div><div>Here, the argument passed is r. Every time the program encounters area(argument), it will be replace by (3.1415*argument*argument). Suppose, we passed (r1+5) as argument then, it expands as below:</div><div><br></div><div>area(r1+5) expands to (3.1415*(r1+5)(r1+5))</div><div><br></div><div>C Program to find area of a circle, passing arguments to macros. [Area of circle=πr2]</div><div><br></div><div>#include &lt;stdio.h&gt;</div><div>#define PI 3.1415</div><div>#define area(r) (PI*r*r)</div><div>int main(){</div><div>&nbsp; &nbsp; int radius;</div><div>&nbsp; &nbsp; float area;</div><div>&nbsp; &nbsp; printf("Enter the radius: ");</div><div>&nbsp; &nbsp; scanf("%d",&amp;radius);</div><div>&nbsp; &nbsp; area=area(radius);</div><div>&nbsp; &nbsp; printf("Area=%.2f",area);</div><div>&nbsp; &nbsp; return 0;</div><div>}</div>