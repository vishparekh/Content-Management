<div>Bit Field:</div><div><br></div><div>Bit Field Declaration</div><div>---------------------</div><div>The declaration of a bit-field has the form inside a structure:</div><div>struct</div><div>{</div><div>&nbsp; type [member_name] : width ;</div><div>};</div><div><br></div><div>Below the description of variable elements of a bit field:</div><div>Elements<span class="Apple-tab-span" style="white-space:pre"><span style="white-space: normal;">	</span></span> &nbsp; &nbsp; &nbsp; Description</div><div>---------------------------</div><div>type<span class="Apple-tab-span" style="white-space:pre"><span style="white-space: normal;">	</span></span> &nbsp; &nbsp; &nbsp; &nbsp;An integer type that determines how the bit-field's value is interpreted. The type may be int, signed int, unsigned int.</div><div>member_name &nbsp;The name of the bit-field.</div><div>width<span class="Apple-tab-span" style="white-space:pre"><span style="white-space: normal;">	</span></span> &nbsp; &nbsp; &nbsp; The number of bits in the bit-field. The width must be less than or equal to the bit width of the specified type.</div><div><br></div><div>The variables defined with a predefined width are called bit fields. A bit field can hold more than a single bit for example if you need a variable to store a value from 0 to 7 only then you can define a bit field with a width of 3 bits as follows:</div><div><br></div><div>struct</div><div>{</div><div>&nbsp; unsigned int age : 3;</div><div>} Age;</div><div><br></div><div>The above structure definition instructs C compiler that age variable is going to use only 3 bits to store the value, if you will try to use more than 3 bits then it will not allow you to do so. Let us try the following example:</div><div><br></div><div>#include &lt;stdio.h&gt;</div><div>#include &lt;string.h&gt;</div><div><br></div><div>struct</div><div>{</div><div>&nbsp; unsigned int age : 3;</div><div>} Age;</div><div><br></div><div>int main( )</div><div>{</div><div>&nbsp; &nbsp;Age.age = 4;</div><div>&nbsp; &nbsp;printf( "Sizeof( Age ) : %d\n", sizeof(Age) );</div><div>&nbsp; &nbsp;printf( "Age.age : %d\n", Age.age );</div><div><br></div><div>&nbsp; &nbsp;Age.age = 7;</div><div>&nbsp; &nbsp;printf( "Age.age : %d\n", Age.age );</div><div><br></div><div>&nbsp; &nbsp;Age.age = 8;</div><div>&nbsp; &nbsp;printf( "Age.age : %d\n", Age.age );</div><div><br></div><div>&nbsp; &nbsp;return 0;</div><div>}</div><div><br></div><div>When the above code is compiled it will compile with warning and when executed, it produces following result:</div><div><br></div><div>Sizeof( Age ) : 4</div><div>Age.age : 4</div><div>Age.age : 7</div><div>Age.age : 0</div><div><br></div>