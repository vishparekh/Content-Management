<div>Command Line Arguments:</div><div><br></div><div>It is possible to pass some values from the command line to your C&nbsp;</div><div><br></div><div>programs when they are executed. These values are called command line&nbsp;</div><div><br></div><div>arguments and many times they are important for your program specially&nbsp;</div><div><br></div><div>when you want to control your program from outside instead of hard&nbsp;</div><div><br></div><div>coding those values inside the code.</div><div>The command line arguments are handled using main() function&nbsp;</div><div><br></div><div>arguments where argc refers to the number of arguments passed, and&nbsp;</div><div><br></div><div>argv[] is a pointer array which points to each argument passed to the&nbsp;</div><div><br></div><div>program. Following is a simple example which checks if there is any&nbsp;</div><div><br></div><div>argument supplied from the command line and take action accordingly:</div><div>#include &lt;stdio.h&gt;</div><div>int main( int argc, char *argv[] ) &nbsp;</div><div>{</div><div>&nbsp; &nbsp;if( argc == 2 )</div><div>&nbsp; &nbsp;{</div><div>&nbsp; &nbsp; &nbsp; printf("The argument supplied is %s\n", argv[1]);</div><div>&nbsp; &nbsp;}</div><div>&nbsp; &nbsp;else if( argc &gt; 2 )</div><div>&nbsp; &nbsp;{</div><div>&nbsp; &nbsp; &nbsp; printf("Too many arguments supplied.\n");</div><div>&nbsp; &nbsp;}</div><div>&nbsp; &nbsp;else</div><div>&nbsp; &nbsp;{</div><div>&nbsp; &nbsp; &nbsp; printf("One argument expected.\n");</div><div>&nbsp; &nbsp;}</div><div>}</div><div><br></div><div>When the above code is compiled and executed with a single argument,&nbsp;</div><div><br></div><div>it produces the following result.</div><div><br></div><div>$./a.out testing</div><div>The argument supplied is testing</div><div><br></div><div>When the above code is compiled and executed with a two arguments, it&nbsp;</div><div><br></div><div>produces the following result.</div><div><br></div><div>$./a.out testing1 testing2</div><div>Too many arguments supplied.</div><div><br></div><div>When the above code is compiled and executed without passing any&nbsp;</div><div><br></div><div>argument, it produces the following result.</div><div><br></div><div>$./a.out</div><div>One argument expected</div><div><br></div><div>It should be noted that argv[0] holds the name of the program itself and&nbsp;</div><div><br></div><div>argv[1] is a pointer to the first command line argument supplied, and&nbsp;</div><div><br></div><div>*argv[n] is the last argument. If no arguments are supplied, argc will be&nbsp;</div><div><br></div><div>one, otherwise and if you pass one argument then argc is set at 2.</div><div><br></div><div>You pass all the command line arguments separated by a space, but if&nbsp;</div><div><br></div><div>argument itself has a space then you can pass such arguments by putting&nbsp;</div><div><br></div><div>them inside double quotes "" or single quotes ''. Let us re-write above&nbsp;</div><div><br></div><div>example once again where we will print program name and we also pass&nbsp;</div><div><br></div><div>a command line argument by putting inside double quotes:</div><div><br></div><div>#include &lt;stdio.h&gt;</div><div><br></div><div>int main( int argc, char *argv[] ) &nbsp;</div><div>{</div><div>&nbsp; &nbsp;printf("Program name %s\n", argv[0]);</div><div>&nbsp;</div><div>&nbsp; &nbsp;if( argc == 2 )</div><div>&nbsp; &nbsp;{</div><div>&nbsp; &nbsp; &nbsp; printf("The argument supplied is %s\n", argv[1]);</div><div>&nbsp; &nbsp;}</div><div>&nbsp; &nbsp;else if( argc &gt; 2 )</div><div>&nbsp; &nbsp;{</div><div>&nbsp; &nbsp; &nbsp; printf("Too many arguments supplied.\n");</div><div>&nbsp; &nbsp;}</div><div>&nbsp; &nbsp;else</div><div>&nbsp; &nbsp;{</div><div>&nbsp; &nbsp; &nbsp; printf("One argument expected.\n");</div><div>&nbsp; &nbsp;}</div><div>}</div><div><br></div><div>When the above code is compiled and executed with a single argument&nbsp;</div><div><br></div><div>separated by space but inside double quotes, it produces the following&nbsp;</div><div><br></div><div>result.</div><div><br></div><div>$./a.out "testing1 testing2"</div><div><br></div><div>Program name ./a.out</div><div>The argument supplied is testing1 testing2</div><div><br></div>