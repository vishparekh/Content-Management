<div>typedef:</div><div><br></div><div>The C programming language provides a keyword called typedef which&nbsp;</div><div><br></div><div>you can use to give a type a new name. Following is an example to&nbsp;</div><div><br></div><div>define a term BYTE for one-byte numbers:</div><div>typedef unsigned char BYTE;</div><div>After this type definitions, the identifier BYTE can be used as an&nbsp;</div><div><br></div><div>abbreviation for the type unsigned char, for example:.</div><div>BYTE &nbsp;b1, b2;</div><div>By convention, uppercase letters are used for these definitions to remind&nbsp;</div><div><br></div><div>the user that the type name is really a symbolic abbreviation, but you can&nbsp;</div><div><br></div><div>use lowercase, as follows:</div><div><br></div><div>typedef unsigned char byte;</div><div><br></div><div>You can use typedef to give a name to user defined data type as well. For&nbsp;</div><div><br></div><div>example you can use typedef with structure to define a new data type and&nbsp;</div><div><br></div><div>then use that data type to define structure variables directly as follows:</div><div><br></div><div>#include &lt;stdio.h&gt;</div><div>#include &lt;string.h&gt;</div><div>&nbsp;</div><div>typedef struct Books</div><div>{</div><div>&nbsp; &nbsp;char &nbsp;title[50];</div><div>&nbsp; &nbsp;char &nbsp;author[50];</div><div>&nbsp; &nbsp;char &nbsp;subject[100];</div><div>&nbsp; &nbsp;int &nbsp; book_id;</div><div>} Book;</div><div>&nbsp;</div><div>int main( )</div><div>{</div><div>&nbsp; &nbsp;Book book;</div><div>&nbsp;</div><div>&nbsp; &nbsp;strcpy( book.title, "C Programming");</div><div>&nbsp; &nbsp;strcpy( book.author, "Nuha Ali");&nbsp;</div><div>&nbsp; &nbsp;strcpy( book.subject, "C Programming Tutorial");</div><div>&nbsp; &nbsp;book.book_id = 6495407;</div><div>&nbsp;</div><div>&nbsp; &nbsp;printf( "Book title : %s\n", book.title);</div><div>&nbsp; &nbsp;printf( "Book author : %s\n", book.author);</div><div>&nbsp; &nbsp;printf( "Book subject : %s\n", book.subject);</div><div>&nbsp; &nbsp;printf( "Book book_id : %d\n", book.book_id);</div><div><br></div><div>&nbsp; &nbsp;return 0;</div><div>}</div><div><br></div><div>When the above code is compiled and executed, it produces following&nbsp;</div><div><br></div><div>result:</div><div><br></div><div>Book &nbsp;title : C Programming</div><div>Book &nbsp;author : Nuha Ali</div><div>Book &nbsp;subject : C Programming Tutorial</div><div>Book &nbsp;book_id : 6495407</div><div><br></div><div>typedef vs #define</div><div>------------------</div><div><br></div><div>The #define is a C-directive which is also used to define the aliases for&nbsp;</div><div><br></div><div>various data types similar to typedef but with three differences:</div><div><br></div><div>&nbsp; &nbsp; The typedef is limited to giving symbolic names to types only where&nbsp;</div><div><br></div><div>as #define can be used to define alias for values as well, like you can&nbsp;</div><div><br></div><div>define 1 as ONE etc.</div><div><br></div><div>&nbsp; &nbsp; The typedef interpretation is performed by the compiler where as&nbsp;</div><div><br></div><div>#define statements are processed by the pre-processor.</div><div><br></div><div>Following is a simplest usage of #define</div><div>----------------------------------------</div><div><br></div><div>#include &lt;stdio.h&gt;</div><div>&nbsp;</div><div>#define TRUE &nbsp;1</div><div>#define FALSE 0</div><div>&nbsp;</div><div>int main( )</div><div>{</div><div>&nbsp; &nbsp;printf( "Value of TRUE : %d\n", TRUE);</div><div>&nbsp; &nbsp;printf( "Value of FALSE : %d\n", FALSE);</div><div><br></div><div>&nbsp; &nbsp;return 0;</div><div>}</div><div><br></div><div>When the above code is compiled and executed, it produces following&nbsp;</div><div><br></div><div>result:</div><div><br></div><div>Value of TRUE : 1</div><div>Value of FALSE : 0</div>